/* aes implementation, mostly copied from TitanMS.
TODO: learn more about aes and clean this up */

#ifndef AES_NOSTDINT
#include <stdint.h>
#else
#error "TODO: implement non-stdint types"
#endif

void aes_transform(uint8_t const* input, uint8_t* output,
    uint8_t const* key, uint8_t key_size);

// #ifdef AES_IMPLEMENTATION
#include <stdio.h>
#include <string.h>

#define AESINTERNAL static

/* https://en.wikipedia.org/wiki/Rijndael_key_schedule */
uint8_t const aes_rcon[256] =
{
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
    0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25,
    0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8,
    0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
    0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
    0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
    0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e,
    0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa,
    0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
    0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
    0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
    0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
    0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d,
    0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10,
    0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83,
    0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

/* https://en.wikipedia.org/wiki/Rijndael_S-box */
uint8_t const aes_sbox[256] =
{
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
    0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
    0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
    0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
    0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
    0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
    0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
    0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
    0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
    0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
    0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
    0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

AESINTERNAL
void aes_rotate(uint8_t* word)
{
    uint8_t tmp = word[0];
    memcpy(word, word + 1, 3);
    word[3] = tmp;
}

AESINTERNAL
void aes_core(uint8_t* word, intptr_t iter)
{
    uint8_t i;

    aes_rotate(word);

    for (i = 0; i < 4; ++i) {
        word[i] = aes_sbox[word[i]];
    }

    /* xor the rcon operation with the first byte */
    word[0] ^= aes_rcon[iter];
}

AESINTERNAL
void aes_expand_key(uint8_t const* key, uint8_t* expanded_key,
    uint8_t size, intptr_t expanded_size)
{
    intptr_t current_size = 0;
    intptr_t rcon_iter = 1;

    uint8_t tmp[4];
    uint8_t i;

    /* first bytes are just the initial key */
    memcpy(expanded_key, key, size);
    current_size += size;

    while (current_size < expanded_size)
    {
        /* save previous 4 bytes to a tmp buffer */
        memcpy(tmp, expanded_key + current_size - 4, 4);

        /* apply the core schedule to tmp every keysize bytes
           and increment rcon iteration */
        if (current_size % size == 0) {
            aes_core(tmp, rcon_iter++);
        }

        /* extra sbox for 256-bit keys */
        if (size == 32 && current_size % size == 16)
        {
            for (i = 0; i < 4; ++i) {
                tmp[i] = aes_sbox[tmp[i]];
            }
        }

        /* xor tmp with the 4-byte block keysize bytes before
           the new expanded key. these will be the next four bytes
           stored in tmp.
           TODO: optimize this by xoring 4 bytes all at once, same
           for other parts of this aes implementation */
        for (i = 0; i < 4; ++i)
        {
            expanded_key[current_size] =
                expanded_key[current_size - size] ^ tmp[i];

            ++current_size;
        }
    }
}

AESINTERNAL
void aes_sub_bytes(uint8_t* state)
{
    uint8_t i;
    for (i = 0; i < 16; ++i) {
        state[i] = aes_sbox[state[i]];
    }
}

AESINTERNAL
void aes_shift_row(uint8_t* state, uint8_t n)
{
    uint8_t tmp, i;

    /* basically rotates left by 8 bits */
    for (i = 0; i < n; ++i)
    {
        tmp = state[0];
        memcpy(state, state + 1, 3);
        state[3] = tmp;
    }
}

AESINTERNAL
void aes_shift_rows(uint8_t* state)
{
    uint8_t i;
    for (i = 0; i < 4; ++i) {
        aes_shift_row(state + i * 4, i);
    }
}

AESINTERNAL
void aes_add_round_key(uint8_t* state, uint8_t* round_key)
{
    uint8_t i;
    for (i = 0; i < 16; ++i) {
        state[i] ^= round_key[i];
    }
}

AESINTERNAL
uint8_t galois_multiplication(uint8_t a, uint8_t b)
{
    uint8_t p = 0, i, msb;

    for (i = 0; i < 8; ++i)
    {
        if (b & 1) {
            p ^= a;
        }

        msb = a & 0x80;

        a = (uint8_t)(a<<1);

        if (msb) {
            a ^= 0x1B;
        }

        b >>= 1;
    }

    return p;
}

AESINTERNAL
void aes_mix_column(uint8_t* col)
{
    uint8_t cpy[4];
    memcpy(cpy, col, 4);

    col[0] = galois_multiplication(cpy[0], 2) ^
             galois_multiplication(cpy[3], 1) ^
             galois_multiplication(cpy[2], 1) ^
             galois_multiplication(cpy[1], 3);

    col[1] = galois_multiplication(cpy[1], 2) ^
             galois_multiplication(cpy[0], 1) ^
             galois_multiplication(cpy[3], 1) ^
             galois_multiplication(cpy[2], 3);

    col[2] = galois_multiplication(cpy[2], 2) ^
             galois_multiplication(cpy[1], 1) ^
             galois_multiplication(cpy[0], 1) ^
             galois_multiplication(cpy[3], 3);

    col[3] = galois_multiplication(cpy[3], 2) ^
             galois_multiplication(cpy[2], 1) ^
             galois_multiplication(cpy[1], 1) ^
             galois_multiplication(cpy[0], 3);
}

AESINTERNAL
void aes_mix_columns(uint8_t* state)
{
    uint8_t column[4];
    uint8_t i, j;

    for (i = 0; i < 4; ++i)
    {
        /* extract a column as an array */
        for (j = 0; j < 4; ++j) {
            column[j] = state[j * 4 + i];
        }

        /* mix it */
        aes_mix_column(column);

        /* put it back in the matrix */
        for (j = 0; j < 4; ++j) {
            state[j * 4 + i] = column[j];
        }
    }
}

AESINTERNAL
void aes_round(uint8_t* state, uint8_t* round_key)
{
    aes_sub_bytes(state);
    aes_shift_rows(state);
    aes_mix_columns(state);
    aes_add_round_key(state, round_key);
}

AESINTERNAL
void aes_create_round_key(uint8_t* expanded_key,
    uint8_t* round_key)
{
    uint8_t i, j;

    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j) {
            round_key[i + j * 4] = expanded_key[i * 4 + j];
        }
    }
}

AESINTERNAL
void aes_main(uint8_t* state, uint8_t* expanded_key,
    intptr_t nrounds)
{
    uint8_t round_key[16];
    intptr_t i;

    aes_create_round_key(expanded_key, round_key);
    aes_add_round_key(state, round_key);

    for (i = 1; i < nrounds; ++i)
    {
        aes_create_round_key(expanded_key + i * 16, round_key);
        aes_round(state, round_key);
    }

    aes_create_round_key(expanded_key + nrounds * 16, round_key);
    aes_sub_bytes(state);
    aes_shift_rows(state);
    aes_add_round_key(state, round_key);
}

void aes_transform(uint8_t const* input, uint8_t* output,
    uint8_t const* key, uint8_t key_size)
{
    uint8_t expanded_key[15 * 16];
    intptr_t nrounds;

    intptr_t expanded_key_size;
    uint8_t block[16];

    uint8_t i, j;

    switch (key_size)
    {
    case 16:
        nrounds = 10;
        break;
    case 24:
        nrounds = 12;
        break;
    case 32:
        nrounds = 14;
        break;
    default:
        fprintf(stderr, "invalid key_size in transform_aes\n");
        return;
    }

    expanded_key_size = 16 * (nrounds + 1);

    /* block is a column-major order 4x4 matrix, so we need to map
       our input to it correctly */
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j) {
            block[i + j * 4] = input[i * 4 + j];
        }
    }

    aes_expand_key(key, expanded_key, key_size, expanded_key_size);
    aes_main(block, expanded_key, nrounds);

    /* unmap the matrix after the transformation back into the
       output buffer */
    for (i = 0; i < 4; ++i)
    {
        for (j = 0; j < 4; ++j) {
            output[i * 4 + j] = block[i + j * 4];
        }
    }
}
// #endif
